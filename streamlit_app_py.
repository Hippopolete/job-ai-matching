# -*- coding: utf-8 -*-
"""streamlit_app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qMWVbxaYcFqsjTHNBOj-e1GUBNo0bn2g
"""

from google.colab import drive
drive.mount('/content/drive')

import shutil, os

# Define paths
local_export_path = "/content/job-matching-app"
processed_path = os.path.join(local_export_path, "datasets", "processed")
os.makedirs(processed_path, exist_ok=True)

# File sources from uploaded files
# Update paths to point to your Google Drive mounted location
uploads = {
    "candidates.csv": "/mnt/data/Copy of candidates.csv",
    "final_matched_jobs.csv": "/mnt/data/final_matched_jobs.csv",
    "recruiter_view.csv": "/mnt/data/recruiter_view.csv"
}


# Copy files into correct structure
for filename, src_path in uploads.items():
    dst_path = os.path.join(processed_path, filename)
    shutil.copy(src_path, dst_path)

# Confirm creation
os.listdir(processed_path)

import streamlit as st
import pandas as pd
import os

# --- Load data ---
@st.cache_data
def load_data():
    base_path = "./"
    candidates = pd.read_csv(os.path.join(base_path, "datasets/processed/candidates.csv"))
    matches = pd.read_csv(os.path.join(base_path, "datasets/processed/final_matched_jobs.csv"))
    recruiter = pd.read_csv(os.path.join(base_path, "datasets/processed/recruiter_view.csv"))
    return candidates, matches, recruiter

candidates_df, matched_jobs_df, recruiter_df = load_data()

# --- Sidebar Navigation ---
st.sidebar.title("üîç Navigation")
view = st.sidebar.radio("Go to:", ["Candidate Matches", "Recruiter View", "Skill Gaps"])

# --- Candidate Matches View ---
if view == "Candidate Matches":
    st.title("üë§ Candidate Job Matches")
    selected_name = st.selectbox("Select a candidate:", candidates_df["Candidate Name"].unique())
    filtered = matched_jobs_df[matched_jobs_df["Candidate Name"] == selected_name]

    if not filtered.empty:
        st.success(f"Found {len(filtered)} job matches for {selected_name}.")
        st.dataframe(filtered.sort_values("Skill Match %", ascending=False).reset_index(drop=True))
    else:
        st.warning("No matches found.")

# --- Recruiter View ---
elif view == "Recruiter View":
    st.title("üíº Top Candidates per Job")
    selected_title = st.selectbox("Select a Job Title:", recruiter_df["Job Title"].unique())
    filtered = recruiter_df[recruiter_df["Job Title"] == selected_title]
    st.dataframe(filtered.sort_values("Skill Match %", ascending=False).reset_index(drop=True))

# --- Skill Gaps View ---
elif view == "Skill Gaps":
    st.title("üîß Skill Gap Suggestions")
    selected_name = st.selectbox("Select a candidate:", matched_jobs_df["Candidate Name"].unique())
    filtered = matched_jobs_df[matched_jobs_df["Candidate Name"] == selected_name]

    if not filtered.empty:
        gap_skills = []
        for val in filtered["Missing Skills"]:
            if pd.notna(val):
                gap_skills.extend(val.split(", "))
        top_missing = pd.Series(gap_skills).value_counts().reset_index()
        top_missing.columns = ["Missing Skill", "Count"]
        st.dataframe(top_missing)
    else:
        st.warning("No skill gap data found.")

!ls /mnt/data
